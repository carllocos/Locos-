#lang racket

(require (prefix-in cc: Project/Infrabel/commandControl))
(require (prefix-in tj: Project/Infrabel/trajectADT))
(require (prefix-in rwm: Project/SharedADTs/railwaymodelADT))
(require (prefix-in rs: Project/SharedADTs/railsADT))

(provide reached-new-track
         reached-new-detection
         reserve-until-detection!
         correct-delay!
         use-simulation!
         )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; When we update switchs we distinguishe two cases:
;;
;;
;;                                                    Loco3
;;                                            Lg (1)----------------
;;                                          /
;;                                         /
;;                                        /
;;                                       /
;;       Loco1                          /
;;  Wp-------------Nm------------------Bx
;;                                      \
;;                                       \  
;;                                        \         Loco2
;;                                         Gt (2)------------------
;;
;;
;; normal case:
;;
;; In a normal case a loco drives to track n0-nm from a switch. The switch will be updated immidiatly when such a case is encountered ex: Loco1
;;
;; inverse case:
;;
;; In a inverse case a loco drives to a track nm-n1 or nm-n2 ex: Loco2 and Loco3. As long we encounter such cases in the traject they will be
;; until we encounter a non swicht track or a normal case switch. The inverse case switchs will be updated in a reverse way
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define simulation? #t)

(define (use-simulation! s)
  (set! simulation? s))

(define normal-case 'normal-case)
(define inverse-case 'inverse-case)


;test which switch case we have
(define (switch-case s prev current)
  ;(displayln (string-append "switch-case: switch "
                      ;      (symbol->string (s 'get-id-mn))))
  (let ((p1 ((s 'which-track) prev))
        (p2 ((s 'which-track) current)))
    (if (= 0 p1)
        (begin ;(display "switch-case: normale case current track pos:")
               ;(displayln p1)
               normal-case)
        (begin ;(display "switch-case: inverse case next track pos:")
               ;(displayln p2)
               inverse-case))))

(define (update-switch! rwm  switch track)
  (let ((new-position ((switch 'which-track) track)))
    (if simulation?
        (cc:change-switch! (switch 'get-id-mn) new-position)
        (let ((hardware-id (rwm:switch-logic-id->switch-hardware-id (switch 'get-id-mn))))
          
          ;(displayln "BITCH:")
          ;(displayln "logic id:")
          ;(displayln (switch 'get-id-mn))
          ;(displayln "HARDWARE ID:")
          ;(displayln hardware-id)
          (when hardware-id
            (cc:change-switch! hardware-id new-position))))
    ((switch 'set-position!) new-position)))
       

;;updates all switch until next detection
(define (update-switchs! rwm traject)
  (define cur (tj:current-track traject))
  (define ts (tj:list-tracks-until-condition traject (lambda( t)
                                                  (and (rs:detection-type? t)
                                                       (not (rs:same-track? t cur))))))
  (define new-prev '())
  (define new-lst '())

  (define (update-references t lst)
    (set! new-prev t)
    (set! new-lst lst))
  
  (define (update-inverse-case prev-t lst)
    (if (null? lst)
        (update-references '() '())
        (let* ((current-t (car lst))
               (s (rwm:switch? rwm prev-t current-t)))
          (if s
              (if (eq? (switch-case s prev-t current-t) inverse-case)
                  (begin (update-inverse-case current-t (cdr lst))
                         (update-switch! rwm s prev-t))
                  (update-references prev-t lst))
              (update-references prev-t lst)))))
    

  (define (update-normal-case prev-t lst)
    (unless (null? lst)
      (let* ((current-t (car lst))
             (s (rwm:switch? rwm prev-t current-t)))
        (if s
            (if (eq? (switch-case s prev-t current-t) normal-case)
                (begin (update-switch! rwm s current-t)
                       (update-normal-case current-t (cdr lst)))
                (begin (update-inverse-case prev-t lst)
                       (unless (null? new-prev)
                         (update-normal-case new-prev new-lst))))
            (update-normal-case current-t (cdr lst))))))
  
  (update-normal-case (car ts) (cdr ts)))


;called when a non detection has been reached
(define (reached-new-track rwm traject)
  (define prev-prev-track (tj:previous-track traject))
  (tj:advance! traject)
  (define prev-track (tj:previous-track traject))
  (prev-track 'free!)
  
  (when (rs:detection-type? prev-track)
    (tj:previous-detection! traject prev-track))

  ;test to free a switch
  (define s (rwm:switch? rwm prev-prev-track prev-track))
  (when s
    (s 'free!))
  )


;called when a detection has been reached
(define (reached-new-detection rwm traject)
  (define prev-prev-track (tj:previous-track traject))
  (tj:advance! traject)
  (define prev-track (tj:previous-track traject))
  (prev-track 'free!)
  (tj:next-detection! traject)
  
  (define s (rwm:switch? rwm prev-prev-track prev-track))
  (when s
    (s 'free!))
  )


;The procedure will reserve all of the tracks untile we reach the next-detection
(define (reserve-until-detection! rwm traject)
  (let((current (tj:current-track traject))
       (loco-id (tj:traject-loco traject))
       (prev-t #f))
    (tj:member-current-pos traject
                                (lambda(track)
                                  (let ((s (rwm:switch? rwm prev-t track)))
                                    (when s
                                      ((s 'reserve!) loco-id))
                                    (set! prev-t track)
                                    ((track 'reserve!) loco-id)
                                  
                                    (if (and (rs:detection-type? track)
                                             (not (eq? (track 'get-id) (current 'get-id))))
                                        #t
                                        #f)))))
  (update-switchs! rwm traject)
  )

;called to correct the traject delay between a logic loco and hardware loco
(define (correct-delay! rwm loco traject id-new-current update-sig)
  (define n-d (tj:next-detection traject))
  (unless (eq? (n-d 'get-id) id-new-current)
    (error (string-append "correct-delay! the new current-track"
                          (symbol->string id-new-current)
                          "isn't part of the traject")))
  (define c (tj:current-track traject))
  
  (when (rs:detection-type? c)
    (tj:previous-detection! traject c))

  
  (let loop ((prev-prev-t #f)
             (prev-t (tj:previous-track traject)))
    (let ((cur-t (tj:current-track traject)))
      (when prev-t
        (prev-t 'free!)
        (when prev-prev-t
          (let ((s (rwm:switch? rwm prev-prev-t prev-t)))
            (when s
              (s 'free!)))))
      (unless (and (rs:detection-type? cur-t)
                   (eq? (cur-t 'get-id) id-new-current))
        
          
        ;(displayln "advance!")
        (tj:advance! traject)
        (update-sig rwm traject)
        (loop prev-t cur-t)      
        )))

  (tj:next-detection! traject)
  
  (define new-p (tj:previous-track traject))
  (define new-c (tj:current-track traject))
  (define common (rs:node-in-common new-p new-c))


  (define n2 (if (eq? common (new-c 'get-id-n1))
                 (new-c 'get-id-n2)
                 (new-c 'get-id-n1)))

  ((loco 'set-id-n1!) (if (> (loco 'get-speed) 0)
                          common
                          n2))
  ((loco 'set-id-n2!) (if (> (loco 'get-speed) 0)
                          n2
                          common))

  ;(displayln "common:")
  
  ;(displayln common)
  ;(displayln "n2:")
  ;(displayln n2)
  
  ;(displayln (loco 'get-id-n1))
  ;(displayln " - ")
  ;(displayln (loco 'get-id-n2))
  )  
                                                        