#lang racket
(require "locoADT"
         "trainStopADT"
         "switch"
         "rail-segmentADT"
         "signalADT"
         "label-unweighted-graph")





;;Deze procedure zal per conventie in een vector resulteren waarbij de elementen lijsten zijn van
;;resp. Locos, nodes, switchs, tracks, detections en signals
(define (load-rwm filename)
  (let ([graph '()]
        [lines (map string-split (file->lines filename))]
        [ls '()]
        [amount-l 0]
        [ns '()]
        [amount-n 0]
        [ss '()]
        [amount-s 0]
        [ts '()]
        [amount-t 0]
        [ds '()]
        [amount-d 0]
        [sigs '()]);;;Sigs stelt de lijst van signals voor en de aantal is evengroot als de aantal detections
    (for-each
     (lambda (l)
       (case (string->symbol (car l))
         [(L) (let* ([lid (string->symbol (list-ref l 1))]  
                     [n1 (string->symbol (list-ref l 2))]
                     [n2 (string->symbol (list-ref l 3))]
                     [res (new-loco lid n1 n2)])
                (set! ls (cons res ls))
                (set! amount-l (+ amount-l 1)))]
         [(N) (let* ([id (string->symbol (list-ref l 1))] 
                     [x (string->number (list-ref l 2))]
                     [y (string->number (list-ref l 3))]
                     [res (new-node id x y)])
                (set! ns (cons res ns))
                (set! amount-n (+ amount-n 1)))]
         [(S) (let* ([nm (string->symbol (list-ref l 1))]  
                     [n0 (string->symbol (list-ref l 2))]
                     [n1 (string->symbol (list-ref l 3))]
                     [n2 (string->symbol (list-ref l 4))]
                     [res (new-switch nm n0 n1 n2)])
                (set! ss (cons res ss))
                (set! amount-s (+ amount-s 1)))]
         [(T) (let* ([n1 (string->symbol (list-ref l 1))] 
                     [n2 (string->symbol (list-ref l 2))]
                     [res (new-track n1 n2)])
                (set! ts (cons res ts))
                (set! amount-t (+ amount-t 1)))]
         [(D) (let* ([id (string->symbol (list-ref l 1))]    
                     [n1 (string->symbol (list-ref l 2))]
                     [n2 (string->symbol (list-ref l 3))]
                     [res (new-detection id n1 n2)]
                     [signal (new-signal id)])
                (set! ds (cons res ds))
                (set! sigs (cons signal sigs))
                (set! amount-d (+ amount-d 1)))]))
     lines)
    (set! graph (new-unweighted-label-graph amount-n #f))
    (vector graph ls ns ss ts ds sigs)))

(define (v-for-each v proc)
  (define length (vector-length v))
  (let loop ((i 0))
    (when (< i length)
      (proc (vector-ref v i))
      (loop (+ i 1)))))
(define set-up '())

(define make-table make-hash)
(define add-table hash-set!)
(define get-table hash-ref)